/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ad_practica_DOM;

import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

/**
 *
 * @author LABORATORIOS
 */
public class AD_Practica2_DOM extends javax.swing.JFrame {

    /**
     * Creates new form AD_Practica2_DOM
     */
    public AD_Practica2_DOM() {
        initComponents();
        this.setTitle("Practica DOM");
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextFieldPuesto = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jButtonFiltrar = new javax.swing.JButton();
        jButtonLimpiar = new javax.swing.JButton();
        jButtonFinalizar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(new java.awt.GridLayout());

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("Puesto:    ");
        jPanel1.add(jLabel1);
        jPanel1.add(jTextFieldPuesto);

        jPanel2.setLayout(new java.awt.GridLayout());

        jButtonFiltrar.setBackground(new java.awt.Color(204, 204, 255));
        jButtonFiltrar.setText("Filtrar");
        jButtonFiltrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFiltrarActionPerformed(evt);
            }
        });
        jPanel2.add(jButtonFiltrar);

        jButtonLimpiar.setBackground(new java.awt.Color(255, 204, 204));
        jButtonLimpiar.setText("Limpiar");
        jButtonLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLimpiarActionPerformed(evt);
            }
        });
        jPanel2.add(jButtonLimpiar);

        jButtonFinalizar.setBackground(new java.awt.Color(204, 255, 204));
        jButtonFinalizar.setText("Finalizar");
        jButtonFinalizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFinalizarActionPerformed(evt);
            }
        });
        jPanel2.add(jButtonFinalizar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 288, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonFiltrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFiltrarActionPerformed
        if (!jTextFieldPuesto.getText().isBlank()) {
            try {
                String puesto = jTextFieldPuesto.getText();
                //Creamos en DocumentBuilderFactory para poder itilizar el document builder
                DocumentBuilderFactory fabrica = DocumentBuilderFactory.newInstance();
                //hacemos que ignore comentarios y espacios en blancos
                fabrica.setIgnoringComments(true);
                fabrica.setIgnoringElementContentWhitespace(true);
                DocumentBuilder creaArbol = fabrica.newDocumentBuilder();
                //Creamos el File para poder manipularlo
                File fichero = new File("empleados.xml");
                //si el fichero existe podemos empezar con DOM
                if (fichero.exists()) {
                    //creamos el arbol
                    Document arbolXML = creaArbol.parse(fichero);
                    System.out.println("√Årbol creado");
                    //sacamos el nodo raiz
                    Node raiz = arbolXML.getFirstChild();
                    //si el nodo raiz exite y no es nulo podemos empezar a ver si tiene nodos hijos
                    if (raiz != null) {
                        //Con nodelist podemos sacar un array de nodos que son hijos
                        NodeList hijosRaiz = raiz.getChildNodes();

                        for (int i = 0; i < hijosRaiz.getLength(); i++) {
                            //sacamos los hijos de los hijos, los nietos con un for para sacar todos los nietos
                            NodeList nietos = hijosRaiz.item(i).getChildNodes();
                            //si el nodod es de tipo element pdemos seguir sacando sus hijos
                            if (hijosRaiz.item(i).getNodeType() == Node.ELEMENT_NODE) {
                                
                                for (int j = 0; j < nietos.getLength(); j++) {
                                    //Ya este es el nodo final y el que deberia se el de tipo texto y del cual podemos sacer informacion
                                    Node bisnietos = nietos.item(j).getFirstChild();
                                    
                                    if (bisnietos == null) {
                                        
                                    }else if (bisnietos.getNodeType() == Node.TEXT_NODE) {
                                        //Aqui compararamos al nodo nietos de tipo Element que su nombre contenga 'puesto' y
                                        //los bisnietos de tipo text que contengan el nombre del puesto pasado por consola
                                        if (nietos.item(j).getNodeName().contains("puesto") && bisnietos.getNodeValue().toLowerCase().contains(puesto.toLowerCase())) {
                                            //nietos.item(j-2).getNodeName() se hace para conseguir el nodo tipo element que antecese al nodo altual, es menos 2 ya que el menos uno es donde
                                            //cierra y -2 donde abre, esto funciona en los dos el nombre y la antiguedad
                                            System.out.println(nietos.item(j-2).getNodeName() + " : " + nietos.item(j-2).getFirstChild().getNodeValue());
                                            System.out.println(nietos.item(j).getNodeName() + " : " + nietos.item(j).getFirstChild().getNodeValue());
                                            //nietos.item(j+2).getFirstChild().getNodeValue() en esta parte no puedo utilizar la variable bisnieto ya que solo me daria el puesto, ashi que tengo que coger a los hijos
                                            //del nieto uno por uno y sacar su valor
                                            System.out.println(nietos.item(j+2).getNodeName() + " : " + nietos.item(j+2).getFirstChild().getNodeValue());
                                            System.out.println("-------------------------------------");
                                            
                                        }
                                        
                                    }
                                }
                            }
                            
                        }
                        
                    }
                } else {
                    System.out.println("No existe.");
                }   } catch (ParserConfigurationException ex) {
                Logger.getLogger(AD_Practica2_DOM.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SAXException ex) {
                Logger.getLogger(AD_Practica2_DOM.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(AD_Practica2_DOM.class.getName()).log(Level.SEVERE, null, ex);
            }
        }else System.out.println("Formulario vacio.");
    }//GEN-LAST:event_jButtonFiltrarActionPerformed

    private void jButtonLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLimpiarActionPerformed
        jTextFieldPuesto.setText("");
    }//GEN-LAST:event_jButtonLimpiarActionPerformed

    private void jButtonFinalizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFinalizarActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButtonFinalizarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AD_Practica2_DOM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AD_Practica2_DOM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AD_Practica2_DOM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AD_Practica2_DOM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AD_Practica2_DOM().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonFiltrar;
    private javax.swing.JButton jButtonFinalizar;
    private javax.swing.JButton jButtonLimpiar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTextField jTextFieldPuesto;
    // End of variables declaration//GEN-END:variables
}
