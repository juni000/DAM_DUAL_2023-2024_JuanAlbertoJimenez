/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package aD_Practica_1;

import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;
import java.io.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
/**
 *
 * @author DAM
 */
public class MainFrame extends javax.swing.JFrame {
    DefaultTableModel tablainterna;
    boolean inicio = false;
    String fichNom = "empleados.CSV";
    /**
     * Creates new form MainFrame
     */
    public MainFrame() throws IOException {
        initComponents();
        this.setTitle("Añadir Empleados");
        this.inicializarTabla();
    }
    public void inicializarTabla() throws IOException{
        tablainterna = new DefaultTableModel(); // Crea un nuevo modelo de tabla
        String columnas[] = {"Nombre", "Apellidos","Cargo", "Edad"}; // Nombres de las columnas
        tablainterna.setColumnIdentifiers(columnas); // Establece las columnas en el modelo de tabla

        File fich = new File(fichNom); // Crea un objeto File con el nombre del archivo CSV
        if (!fich.exists()) {
            fich.createNewFile();
            inicio = true;
        }
        // Abre el archivo CSV para lectura
        FileReader fichfr = new FileReader(fich);
        BufferedReader fichBR = new BufferedReader(fichfr);
        
        String linea; // Variable para almacenar cada línea del archivo
        String[] datos = {"", "", "", ""}; // Arreglo para almacenar los datos de cada fila
        
        // Lee cada línea del archivo CSV
        while ((linea = fichBR.readLine()) != null) {
            // Verifica si la línea está en blanco
            if (linea.isBlank()) {
                inicio = true; // Marca que se han leído los encabezados del archivo
            } else {
                // Verifica si la línea no contiene los encabezados
                if (!linea.contains("Nombre;Apellidos;Cargo;Edad;")) {
                    datos = linea.split(";"); // Divide la línea por el delimitador ";" y almacena los datos en el arreglo
                    tablainterna.addRow(datos); // Agrega los datos como una nueva fila en la tabla
                }
            }
        }
        // Cierra el BufferedReader
        fichBR.close();
        // Establece el modelo de tabla en el jTable1
        jTable1.setModel(tablainterna);
    }

    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextFieldNombre = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldApellido = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jTextFieldCargo = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jTextFieldEdad = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jButtonAnadir = new javax.swing.JButton();
        jButtonActualizar = new javax.swing.JButton();
        jButtonFiltrar = new javax.swing.JButton();
        jButtonLimpiar = new javax.swing.JButton();
        jButtonBorrarTabla = new javax.swing.JButton();
        jButtonAyuda = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(59, 179, 245));

        jPanel1.setBackground(new java.awt.Color(153, 153, 255));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Nombre:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 4;
        gridBagConstraints.ipady = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 8, 8);
        jPanel1.add(jLabel1, gridBagConstraints);

        jTextFieldNombre.setBackground(new java.awt.Color(102, 102, 255));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 52;
        gridBagConstraints.ipady = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(0, 9, 8, 19);
        jPanel1.add(jTextFieldNombre, gridBagConstraints);

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Apellido:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 4;
        gridBagConstraints.ipady = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 8, 8);
        jPanel1.add(jLabel2, gridBagConstraints);

        jTextFieldApellido.setBackground(new java.awt.Color(102, 102, 255));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 52;
        gridBagConstraints.ipady = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(0, 9, 8, 19);
        jPanel1.add(jTextFieldApellido, gridBagConstraints);

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Cargo:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 4;
        gridBagConstraints.ipady = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 8, 8);
        jPanel1.add(jLabel3, gridBagConstraints);

        jTextFieldCargo.setBackground(new java.awt.Color(102, 102, 255));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 52;
        gridBagConstraints.ipady = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(0, 9, 8, 19);
        jPanel1.add(jTextFieldCargo, gridBagConstraints);

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Edad:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 4;
        gridBagConstraints.ipady = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 8, 8);
        jPanel1.add(jLabel4, gridBagConstraints);

        jTextFieldEdad.setBackground(new java.awt.Color(102, 102, 255));
        jTextFieldEdad.setName(""); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 52;
        gridBagConstraints.ipady = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(0, 9, 8, 19);
        jPanel1.add(jTextFieldEdad, gridBagConstraints);

        jPanel2.setBackground(new java.awt.Color(153, 204, 255));
        jPanel2.setLayout(new java.awt.GridLayout(7, 1));

        jButtonAnadir.setBackground(new java.awt.Color(102, 204, 255));
        jButtonAnadir.setText("Añadir");
        jButtonAnadir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnadirActionPerformed(evt);
            }
        });
        jPanel2.add(jButtonAnadir);

        jButtonActualizar.setBackground(new java.awt.Color(102, 204, 255));
        jButtonActualizar.setText("Actualizar");
        jButtonActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonActualizarActionPerformed(evt);
            }
        });
        jPanel2.add(jButtonActualizar);

        jButtonFiltrar.setBackground(new java.awt.Color(102, 204, 255));
        jButtonFiltrar.setText("Filtrar por edad");
        jButtonFiltrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFiltrarActionPerformed(evt);
            }
        });
        jPanel2.add(jButtonFiltrar);

        jButtonLimpiar.setBackground(new java.awt.Color(102, 204, 255));
        jButtonLimpiar.setText("Limpiar");
        jButtonLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLimpiarActionPerformed(evt);
            }
        });
        jPanel2.add(jButtonLimpiar);

        jButtonBorrarTabla.setBackground(new java.awt.Color(102, 204, 255));
        jButtonBorrarTabla.setText("Borrar tabla");
        jButtonBorrarTabla.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBorrarTablaActionPerformed(evt);
            }
        });
        jPanel2.add(jButtonBorrarTabla);

        jButtonAyuda.setBackground(new java.awt.Color(102, 204, 255));
        jButtonAyuda.setText("Ayuda");
        jButtonAyuda.setToolTipText("Se añadiran los datos a un txt ademas de a la tabla");
        jButtonAyuda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAyudaActionPerformed(evt);
            }
        });
        jPanel2.add(jButtonAyuda);

        jButton3.setBackground(new java.awt.Color(102, 204, 255));
        jButton3.setText("Salir");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton3);

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setLayout(new javax.swing.BoxLayout(jPanel3, javax.swing.BoxLayout.LINE_AXIS));

        jScrollPane1.setBackground(new java.awt.Color(246, 21, 232));

        jTable1.setBackground(new java.awt.Color(204, 153, 255));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.setGridColor(new java.awt.Color(42, 117, 145));
        jTable1.setSelectionBackground(new java.awt.Color(255, 255, 255));
        jTable1.setSelectionForeground(new java.awt.Color(255, 255, 255));
        jScrollPane1.setViewportView(jTable1);

        jPanel3.add(jScrollPane1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, 532, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonAnadirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnadirActionPerformed
        try {
            this.inicializarTabla();
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        FileWriter fichfw = null; // Inicialización de FileWriter para escribir en el archivo
        try {
            // Obtiene los datos ingresados en los campos de texto y los almacena en un arreglo
            String datos[] = {jTextFieldNombre.getText(), jTextFieldApellido.getText(), jTextFieldCargo.getText(), jTextFieldEdad.getText()};
            boolean vacio = false; // Variable para verificar si algún campo está vacío
            if (!datos[3].isBlank()) {
                 Integer.parseInt(datos[3]);
            }
           
            File fich = new File(fichNom); // Crea un objeto File con el nombre del archivo CSV

            // Abre el archivo CSV en modo de escritura (se añadirán datos al final)
            fichfw = new FileWriter(fich, true);
            BufferedWriter fichBW = new BufferedWriter(fichfw);

            // Si es la primera inserción, escribe los encabezados en el archivo CSV
            if (inicio) {
                String columnas[] = {"Nombre", "Apellidos", "Cargo", "Edad"};
                for (int i = 0; i < columnas.length; i++) {
                    fichBW.write(columnas[i] + ";"); // Escribe cada columna seguida de un punto y coma
                    inicio = false; // Marca que se han escrito los encabezados
                }
                fichBW.newLine(); // Nueva línea después de escribir los encabezados
            }

            // Verifica si algún campo está vacío
            for (int i = 0; i < datos.length; i++) {
                if (datos[i].isBlank()) {
                    vacio = true; // Marca que al menos un campo está vacío
                }
            }

            // Si algún campo está vacío, muestra un mensaje de advertencia
            if (vacio) {
                JOptionPane.showMessageDialog(null, "Introduzca todos los campos", "INFORMACION", JOptionPane.WARNING_MESSAGE);
            } else { // Si no hay campos vacíos
                // Escribe los datos en el archivo CSV
                for (int i = 0; i < datos.length; i++) {
                    fichBW.write(datos[i] + ";"); // Escribe cada dato seguido de un punto y coma
                }
                fichBW.newLine(); // Nueva línea después de escribir los datos
                fichBW.flush(); // Limpia el buffer y escribe los datos en el archivo
                fichBW.close(); // Cierra el BufferedWriter

                // Agrega los datos como una nueva fila en la tabla
                tablainterna.addRow(datos);

                // Habilita el botón para borrar la tabla
                jButtonBorrarTabla.setEnabled(true);
            }   
        } catch (IOException | NumberFormatException  ex) { // Captura excepciones de E/S
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Edad incorrecta", "INFORMACION", JOptionPane.ERROR_MESSAGE);
        } finally {
            try {
                // Cierra el FileWriter en el bloque finally para asegurarse de que siempre se cierre
                if (fichfw != null) {
                    fichfw.close();
                }
            } catch (IOException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jButtonAnadirActionPerformed

    private void jButtonBorrarTablaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBorrarTablaActionPerformed
        try {
            File fich = new File(fichNom);
            fich.delete();
            fich.createNewFile();
            this.inicializarTabla();
            jButtonBorrarTabla.setEnabled(false);
            inicio =true;
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButtonBorrarTablaActionPerformed

    private void jButtonLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLimpiarActionPerformed
        jTextFieldNombre.setText("");
        jTextFieldApellido.setText("");
        jTextFieldCargo.setText("");
        jTextFieldEdad.setText("");
    }//GEN-LAST:event_jButtonLimpiarActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButtonAyudaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAyudaActionPerformed
        JOptionPane.showMessageDialog(null, "Se creara un CSV o se añadiran los datos introducidos en las celdas.", "INFORMACION", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jButtonAyudaActionPerformed

    private void jButtonFiltrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFiltrarActionPerformed
        boolean correcto = false;
        int edad = 0;
        while (!correcto) {            
            String nombre = JOptionPane.showInputDialog(null, "Ingrese la edad a filtrar.", "Filtrar por edad", JOptionPane.QUESTION_MESSAGE);
            try {
                edad = Integer.parseInt(nombre);
                correcto = true;
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Formato incorrecto.", "ERROR", JOptionPane.ERROR_MESSAGE);
            }
        }
        
        tablainterna = new DefaultTableModel(); // Crea un nuevo modelo de tabla
        String columnas[] = {"Nombre", "Apellidos","Cargo", "Edad"}; // Nombres de las columnas
        tablainterna.setColumnIdentifiers(columnas); // Establece las columnas en el modelo de tabla

        File fich = new File(fichNom); // Crea un objeto File con el nombre del archivo CSV
        
        // Abre el archivo CSV para lectura
        FileReader fichfr;
        try {
        fichfr = new FileReader(fich);
        
        BufferedReader fichBR = new BufferedReader(fichfr);
        
        String linea; // Variable para almacenar cada línea del archivo
        String[] datos = {"", "", "", ""}; // Arreglo para almacenar los datos de cada fila
        
        // Lee cada línea del archivo CSV
        while ((linea = fichBR.readLine()) != null) {
            // Verifica si la línea no contiene los encabezados
            if (!linea.contains("Nombre;Apellidos;Cargo;Edad;")) {
                datos = linea.split(";"); // Divide la línea por el delimitador ";" y almacena los datos en el arreglo
                if (Integer.parseInt(datos[3]) >= edad) {
                    tablainterna.addRow(datos);// Agrega los datos filtrados como una nueva fila en la tabla
                }             
            }
        }
        // Cierra el BufferedReader
        fichBR.close();
        // Establece el modelo de tabla en el jTable1
        jTable1.setModel(tablainterna);
        } catch (IOException ex){
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_jButtonFiltrarActionPerformed

    private void jButtonActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonActualizarActionPerformed
        try {
            this.inicializarTabla();
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButtonActualizarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new MainFrame().setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButtonActualizar;
    private javax.swing.JButton jButtonAnadir;
    private javax.swing.JButton jButtonAyuda;
    private javax.swing.JButton jButtonBorrarTabla;
    private javax.swing.JButton jButtonFiltrar;
    private javax.swing.JButton jButtonLimpiar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextFieldApellido;
    private javax.swing.JTextField jTextFieldCargo;
    private javax.swing.JTextField jTextFieldEdad;
    private javax.swing.JTextField jTextFieldNombre;
    // End of variables declaration//GEN-END:variables
}
